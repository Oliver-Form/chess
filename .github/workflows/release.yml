name: Build and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write
  packages: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: chess
            asset_name: chess-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: chess.exe
            asset_name: chess-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: chess
            asset_name: chess-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: chess
            asset_name: chess-macos-aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: backend/target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      run: |
        cd backend
        cargo build --release --target ${{ matrix.target }}

    - name: Prepare binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd backend
        cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} ${{ matrix.asset_name }}
        chmod +x ${{ matrix.asset_name }}

    - name: Prepare binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd backend
        copy target\${{ matrix.target }}\release\${{ matrix.binary_name }} ${{ matrix.asset_name }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: backend/${{ matrix.asset_name }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display structure of downloaded files
      run: ls -la artifacts/

    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: release-${{ steps.date.outputs.date }}
        name: Automated Release ${{ steps.date.outputs.date }}
        body: |
          Automated release created from latest commit.
          
          ## Changes
          - Latest updates from commit ${{ github.sha }}
          
          ## Downloads
          - **Linux**: chess-linux-x86_64
          - **Windows**: chess-windows-x86_64.exe  
          - **macOS (Intel)**: chess-macos-x86_64
          - **macOS (Apple Silicon)**: chess-macos-aarch64
        draft: false
        prerelease: false
        files: |
          artifacts/chess-linux-x86_64/chess-linux-x86_64
          artifacts/chess-windows-x86_64.exe/chess-windows-x86_64.exe
          artifacts/chess-macos-x86_64/chess-macos-x86_64
          artifacts/chess-macos-aarch64/chess-macos-aarch64
